dict <- list()
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["tok_qgram"] <- "qgm"
dict["lev"] <- "lev"
tt <- list("lev", NULL, "jaccard")
dict[tt]
dict[unlist(tt)]
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
getnames(valid_list, attrs)
get_names(valid_list, attrs)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
fn_objs
nms
nms
valid_list
attrs
v1 <- valid_list[[3]]
v1
v2 <- unlist(v1)
v2
QPackage:::feat_lkp_names...[v2]
unlist(QPackage:::feat_lkp_names...[v2])
as.vector(QPackage:::feat_lkp_names...[v2])
paste0(attrs, QPackage:::feat_lkp_names...[v2], sep="", collapse="_")
attrs
a1 <- paste0(attrs, sep="", collapse="_")
a1
a2 <- paste0(QPackage:::feat_lkp_names...[v2], sep="", collapse="_")
a2
paste0(a1, a2, sep="", collapse="_")
paste0(a1, "__", a2, sep="", collapse="_")
paste0(a1, "_", a2, sep="", collapse="_")
paste0(a1, a2, sep="_", collapse="_")
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
nms
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
nms
fn_objs
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
fn_objs
fn_objs
nms
fn_objs
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard"), list())
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard", "cosine"), list())
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard", "cosine"), list("tok_qgram"))
l <- list()
kk <- get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard", "cosine"), list("tok_qgram"))
kk <- c(kk, l)
kk
w <- table_a[1:50, ]
b <- table_b[1:50, ]
w <- table_a[1:5, ]
b <- table_b[1:5, ]
names(w)
cmn <- setdiff(intersect(c1, c2), c(unlist(table_a@key), unlist(table_b@key)))
cmn
names(w)
sapply(w, class)
sapply(w, typeof)
sapply(w, mode)
sapply(b, mode)
mode(table_a[, attrs[1]])
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
fn_obj
fn_obj
fn_obj_list
fn_list
ll <- list("jaccard", 3, "tok_qgram" )
dict <- list()
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["tok_qgram"] <- "qgm"
dict["lev"] <- "lev"
dict["cosine"] <- "cos"
dict["monge_elkan"] <- "mel"
dict["needleman_wunsch"] <- "nmw"
dict["smith_waterman"] <- "sw"
dict["smith_waterman_gotoh"] <- "swg"
dict["jaro"] <- "jar"
dict["jaro_winkler"] <- "jwn"
dict["soundex"] <- "sdx"
dict["exact_match"] <- "exm"
dict["abs_diff"] <- "adf"
dict["rel_diff"] <- "rdf"
dict["1"] <- "1"
dict["2"] <- "2"
dict["3"] <- "3"
dict["4"] <- "4"
dict[ll]
ll
dict[unlist(ll)]
feat_lkp_names... <- dict
save(feat_lkp_names..., file = "R/sysdata.rda")
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
save(feat_lkp_names..., auto_gen_table..., gbl_sim_fns..., gbl_toks..., file = "R/sysdata.rda")
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
fn_obj_list
fn_list
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
# set id
status <- set_id(walmart, list("id"))
print(status)
# -- bowker
print("Importing bowker data")
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
print(read_status)
# check id
status <- check_id(bowker, list("id"))
print(status)
# set id
status <- set_id(bowker, list("id"))
print(status)
attr1 <- "isbn"
attr2 <- "isbn"
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher", "pages"), col_names_b = list("title", "author", "binding", "publisher", "pages"))
sampled_data <- sample_qtable(cand_set, 25)
labeled_data <- label_data(sampled_data)
attr1 <- "isbn"
attr2 <- "isbn"
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author"), col_names_b = list("title", "author"))
sampled_data <- sample_qtable(cand_set, 25)
labeled_data <- label_data(sampled_data)
feature_list <- create_features(walmart, bowker, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
feature_list <- create_features(walmart, bowker, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
head(feature_list)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
tok_whitespace("muruga saranam")
monge_elkan("tmep", "tmeo")
needleman_wunsch("tmep", "tmeo")
needleman_wunsch("tmep", "tmeo")
library(rJava)
needleman_wunsch("tmep", "tmeo")
needleman_wunsch("tmep", "tmeo")
library(QPackage)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/apply-feature-fns.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
ret_df
nrow(ret_df)
ncol(ret_df)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/apply-feature-fns.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
labeled_feat_vec[, 1:3]
library(rpart)
acc_rf <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
library(randomForest)
install.packages('randomFores')
install.packages('randomForest')
library(randomForest)
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
acc_dt <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
library(e1071)
install.packages('e1071')
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
model <- train_model(labeled_feat_vec, randomForest)
candset_feat_vec <- convert_to_feature_vecs(walmart, bowker, cand_set, feature_list)
candset_fv_with_labels<- predict_label(candset_feat_vec, model)
View(merge(cand_set,candset_fv_with_labels))
feature_list <- create_features(walmart, bowker)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
View(labeled_feat_vec)
library(rpart)
acc_dt <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
library(randomForest)
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
library(QPackage)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
names(feat_table)
is.data.frame(feat_table)
feat_table <- data.frame(feat_table)
feat_table[, "label"] <- as.factor(feat_table[, "label"])
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
library(QPackage)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
feat_table[, "lang_lang_nmw"]
feat_table[, "lang_lang_nmw"]
feat_table[, "lang_lang_swg"]
feat_table[, "editionDescr_editionDescr_swg"]
model
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
library(QPackage)
model <- train_model(labeled_feat_vec, randomForest)
candset_feat_vec <- convert_to_feature_vecs(walmart, bowker, cand_set, feature_list)
candset_fv_with_labels<- predict_label(candset_feat_vec, model)
View(merge(cand_set,candset_fv_with_labels))
install.packages('knitr')
library(knitr)
devtools::use_vignette("qpkg-vignette")
library(QPackage)
library(QPackage)
data(bowker_bk_dataset)
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
?write.csv
library(QPackage)
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/export-data.R')
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/export-data.R')
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
Inf - Inf
mean(c(1, NULL, 3))
mean(c(1, NA, 3))
library(QPackage)
tok_whitespace("pradap mur")
tok_whitespace("pradap m ur")
library(QPackage)
remove.packages(rJava)
remove.packages(rJava, lib.loc="/scratch/pradap/r-libs/")
remove.packages("rJava", lib.loc="/scratch/pradap/r-libs/")
?remove.packages
remove.packages("rJava", lib="/scratch/pradap/r-libs/")
remove.packages("rJava")
.libPaths
.libPaths()
install.packages("stringdist")
library(stringdist)
?stringdist::qgrams
library(rJava)
library(QPac)
library(QPackage)
?stringdist::qgrams
qgrams('', 3)
qgrams('', q = 3)
qgrams(NA, q = 3)
is.na(qgrams(NA, q = 3))
ss <- (qgrams(NA, q = 3))
ss
is.null(ss)
class(s)
class(ss)
View(ss)
ss <- (qgrams(NULL, q = 3))
ss
ss[,1]
ss[1,1]
ss[1]
ss[1,]
is.integer(ss[1,])
.libPaths()
Q
exit()
quit()
.libPaths
.libPaths()
find.package("rJava")
install.packages("rJava")
library(QPackage)
bowker_file_path <- system.file("extdata/books", "bowker.csv", package = "QPackage")
# Use read_csv to read the contents of csv file
bowker <- read_csv(bowker_file_path, status = read_status)
View(bowker)
check_id(bowker, list("id"))
library(QPackage)
bowker_file_path <- system.file("extdata/books", "bowker.csv", package = "QPackage")
# Use read_csv to read the contents of csv file
bowker <- read_csv(bowker_file_path, status = read_status)
check_id(bowker, list("id"))
data(bowker_bk_dataset)
View(bowker_bk_dataset)
bowker_file_path <- system.file("extdata/books", "bowker.csv", package = "QPackage")
# Use read_csv to read the contents of csv file
bowker <- read_csv(bowker_file_path, status = read_status)
check_id(bowker, list("id"))
library(QPackage)
bowker_file_path <- system.file("extdata/books", "bowker.csv", package = "QPackage")
# Use read_csv to read the contents of csv file
bowker <- read_csv(bowker_file_path, status = read_status)
View(bowker_bk_dataset)
library(QPackage)
bowker_file_path <- system.file("extdata/books", "bowker.csv", package = "QPackage")
# Use read_csv to read the contents of csv file
bowker <- read_csv(bowker_file_path, status = read_status)
View(bowker)
bowker_bk_dataset <- bowker
save(bowker_bk_dataset, file="data/bowker_bk_dataset.RData")
data(walmart_bk_dataset)
check_id(walmart_bk_dataset, list("id"))
walmart <- walmart_bk_dataset
bowker <- bowker_bk_dataset
attr1 <- "isbn" # from walmart dataset
attr2 <- "isbn" # from bowker dataset
# do blocking
cand_set <- apply_block(walmart, bowker, attr_equiv_block, attr1, attr2,
col_names_a = list("title", "author", "binding", "publisher", "pages"),
col_names_b = list("title", "author", "binding", "publisher", "pages")
)
bowker_bk_dataset <- bowker
set_id(bowker_bk_dataset, list("id"))
save(bowker_bk_dataset, file="data/bowker_bk_dataset.RData")
library(QPackage)
walmart <- walmart_bk_dataset
bowker <- bowker_bk_dataset
attr1 <- "isbn" # from walmart dataset
attr2 <- "isbn" # from bowker dataset
# do blocking
cand_set <- apply_block(walmart, bowker, attr_equiv_block, attr1, attr2,
col_names_a = list("title", "author", "binding", "publisher", "pages"),
col_names_b = list("title", "author", "binding", "publisher", "pages")
)
View(cand_set)
feature_list <- create_features(walmart, bowker,
list(c("title", "title"),
c("numAuthors", "numAuthors"),
c("binding", "binding")))
data(test_label_cset)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, label_cset, feature_list)
View(labeled_feat_vec)
library(rpart)
acc_dt <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
acc_dt
library(randomForest)
## randomForest 4.6-10
## Type rfNews() to see new features/changes/bug fixes.
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
acc_rf
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
acc_svm
## [1] 0.76
model <- train_model(labeled_feat_vec, randomForest)
candset_feat_vec <- convert_to_feature_vecs(walmart, bowker, cand_set, feature_list)
candset_fv_with_labels<- predict_label(candset_feat_vec, model)
View(merge(cand_set,candset_fv_with_labels)) # output is suppressed
library(stringdist)
stringdist::stringdist("remp", NULL, method=c("lw"))
stringdist::stringdist("remp", NULL, method=c("lv"))
stringdist::stringdist("remp", NA, method=c("lv"))
adist("remp", NULL)
adist("", "NULL""")
adist("", "")
adist("", "1")
lev("", "1")
lev("", "")
1 - lev("", "")
1 - lev(NA, "")
1 - lev(NULL, "")
lev(NULL, "")
expression(tok_qgram("muruga saranam"))
quote(tok_qgram("muruga saranam"))
quote(lev("mur",
"mur1") > 0.5)
tt <- quote(lev("mur",
"mur1") > 0.5)
tt
parse(tt, text=tt)
parse(tt)
?parse
eval(tt)
ast(tt)
as(tt)
?ast
install.packages("pryr")
library(pryr)
ast(tt)
tt
as.character(tt)
tt
eval(tt)
install.packages('caret')
train
library(caret)
train
getModelInfo(model="rpart")
labeled_feat_vec
?trainControl
trControl <- trainControl("cv")
attributes(trControl)
set.seed(100)
rpart_fit <- train(label ~ ., data = labeled_feat_vec, method = "rpart", trControl = trControl, verbose = T)
rpart_fit <- train(label ~ ., data = data.frame(labeled_feat_vec), method = "rpart", trControl = trControl, verbose = T)
warnings()
is.na(labeled_feat_vec)
any(is.na(labeled_feat_vec))
labeled_feat_vec[, "label"] <- as.factor(labeled_feat_vec[, "label"])
labeled_df <- data.frame(labeled_feat_vec)
labeled_df[, "label"] <- as.factor(labeled_df[, "label"])
rpart_fit <- train(label ~ ., data = data.frame(labeled_feat_vec), method = "rpart", trControl = trControl, verbose = T)
data(iris)
tc <- trainControl("cv",10)
rpart.grid <- expand.grid(.cp=0.2)
train_rpart <- train(Species ~ ., data = iris, method = "rpart", trControl = tc, verbose = T, tuneGrid = rpart.grid)
data(iris)
rpart.grid <- expand.grid(.cp=0.2)
train_rpart <- train(Species ~ ., data = iris, method = "rpart", trControl = tc, verbose = T, tuneGrid = rpart.grid)
tc <- trainControl("cv",10)
train_rpart <- train(Species ~ ., data = iris, method = "rpart", trControl = tc, verbose = T, tuneGrid = rpart.grid)
library(caret)
train_rpart <- train(Species ~ ., data = iris, method = "rpart", trControl = tc, verbose = T, tuneGrid = rpart.grid)
train_rpart <- train(Species ~ ., data = iris, method = "rpart", trControl = tc, tuneGrid = rpart.grid)
train_rpart
?rpart
sapply(iris, class)
library(QPackage)
data(test_label_cset)
fix(label_cset)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, label_cset, feature_list)
data(walmart_bk_dataset)
data(bowker_bk_dataset)
walmart <- walmart_bk_dataset
bowker <- bowker_bk_dataset
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, label_cset, feature_list)
feature_list <- create_features(walmart, bowker,
list(c("title", "title"),
c("numAuthors", "numAuthors"),
c("binding", "binding")))
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, label_cset, feature_list)
fix(labeled_feat_vec)
save(labeled_feat_vec, file="data/test_labeled_feat_vec.RData")
train_rpart <- train(label ~ ., data = labeled_feat_vec, method = "rpart", trControl = tc, tuneGrid = rpart.grid)
labeled_df <- labeled_feat_vec
labeled_df <- data.frame(labeled_feat_vec)
sapply(labeled_df, class)
labeled_df[, "label"] <- as.factor(labeled_df[, "label"])
train_rpart <- train(label ~ ., data = labeled_feat_vec, method = "rpart", trControl = tc, tuneGrid = rpart.grid)
train_rpart <- train(label ~ ., data = labeled_df, method = "rpart", trControl = tc, tuneGrid = rpart.grid)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "rpart", trControl = tc)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "svm", trControl = tc)
train_rpart <- train(label ~ ., data = labeled_df, method = "svmLinear", trControl = tc)
train_rpart <- train(label ~ ., data = labeled_df, method = "randomForest", trControl = tc)
train_rpart <- train(label ~ ., data = labeled_df, method = "rf", trControl = tc)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "svmLinear", trControl = tc)
lev("123", "345")
?lev
train_rpart <- train(label ~ ., data = labeled_df, method = "svmLinear", trControl = tc)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "ada", trControl = tc)
train_rpart <- train(label ~ ., data = labeled_df, method = "ada", trControl = tc)
?ada
train_rpart <- train(label ~ ., data = labeled_df, method = "ada", trControl = tc)
tt <- getModelInfo("ada")
tt
?rpart
?ada
?expand.grid
ada.grid <- expand.grid(nu=0.1, iter=50)
train_rpart <- train(label ~ ., data = labeled_df, method = "ada", trControl = tc, tuneGrid = ada.grid)
ada.grid <- expand.grid(nu=0.1, iter=50, maxdepth=10)
train_rpart <- train(label ~ ., data = labeled_df, method = "ada", trControl = tc, tuneGrid = ada.grid)
train_rpart
ada.grid <- expand.grid(nu=0.1, iter=50, maxdepth=20)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "ada", trControl = tc, tuneGrid = ada.grid)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "anb", trControl = tc, tuneGrid = ada.grid)
train_rpart <- train(label ~ ., data = labeled_df, method = "nb", trControl = tc, tuneGrid = ada.grid)
train_rpart <- train(label ~ ., data = labeled_df, method = "nb", trControl = tc)
?naiveBayes
warnings()
train_rpart
suppressWarnings(T)
train_rpart <- train(label ~ ., data = labeled_df, method = "nb", trControl = tc)
train_rpart
train_rpart <- train(label ~ ., data = labeled_df, method = "nnet", trControl = tc)
train_rpart
?predict
