?cvFolds
ff <- cvFolds(10, K = 5)
ff
attributes(ff)
attr(ff, "subsets")
ff["subsets"]
ff
ff["which"]
ff <- cvFolds(4, K = 5)
ff <- cvFolds(5, K = 5)
ff
?createFolds
library(caret)
iris
split<-createDataPartition(y = mtcars$mpg, p = 0.6, list = FALSE)
dev<-mtcars[split,]
val<-mtcars[-split,]
dev
val
length(dev)
nrow(dev)
nrow(val)
lmFit <- train(mpg ~ ., data = dev, method = "lm")
lmFit
data(iris)
cvFit(rpart, formula=Species~., data=iris,
cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
install.packages("rpart")
data(iris)
cvFit(rpart, formula=Species~., data=iris,
cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
library(rpart)
data(iris)
cvFit(rpart, formula=Species~., data=iris,
cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
data(iris)
cvFit(rpart, formula=Species~., data=iris,
cost=function(y, yHat) (y != yHat) + 0, folds = 5, predictArgs=c(type='class'))
?cvFit
f <- cvFit(rpart, formula=Species~., data=iris, cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
f
summary(f)
f <- cvFit(rpart, formula=Species~., data=iris,  predictArgs=c(type='class'))
f <- cvFit(rpart, formula=Species~., data=iris)
f
3
4
5
6
7
8
9
10
11
12
# load the library
library(caret)
# load the iris dataset
data(iris)
# define training control
train_control <- trainControl(method="cv", number=10)
train_contro;
train_control
model <- train(Species~., data=iris, trControl=train_control, method="rf")
model <- train(Species~., data=iris, trControl=train_control, method="rf")
install.packages("e1071")
model <- train(Species~., data=iris, trControl=train_control, method="rf")
model
summary(model)
library(caret)
?createFolds
y <- 1:10
createFolds(y, 5)
createFolds(y, 10)
createFolds(y, 15)
createFolds(y, 3)
createFolds(y)
createFolds(1:100)
f <- cvFit(rpart, formula=Species~., data=iris, cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
f
attributes(f)
f["cv"]
f["se"]
?train
?randomForest
model <- train(Species~., data=iris, trControl=train_control, method="rf", ntree=50)
summary(model)
model
model <- train(Species~., data=iris, trControl=train_control, method="rf", ntree=50, mtry=3)
model <- train(Species~., data=iris, trControl=train_control, method="rf", ntree=50, tuneGrid = data.frame(.mtry = M))
model <- train(Species~., data=iris, trControl=train_control, method="rf", ntree=50, tuneGrid = data.frame(.mtry = 3))
model
train
model <- train(Species~., data=iris, trControl=train_control, method="rf", ntree=50, tuneGrid = data.frame(.mtry = 3), k = 0)
?train
model <- train(Species~., data=iris, trControl=train_control, method="rf", ntree=50, tuneGrid = data.frame(.mtry = 3))
class(model)
attributes(model)
attributes(model$method)
?randomForest
summary(model)
mode$importance
mode$ntree
model$importance
model$finalModel
?trainControl
createFolds
cvFolds(1:20, K = 5)
?cvFolds
cvFolds(20, K = 5)
ff <- cvFolds(20, K = 5)
ff[1]
ff[2]
ff[3]
ff[34]
ff[4]
ff
ff$Fold
ff[["Fold"]]
?cvFolds
model$finalModel
?cvit
cvFit
?cvFit
?predict.randomForest
?predict.rpart
?predict.randomForest
?predict.rpart
?predict.glmrob
?predict.bag
?predict.avNNet
?predict.bagEarth
?randomForest
svm
?svm
# original example from Digg Data website (Takashi J. OZAKI, Ph. D.)
# http://diggdata.in/post/58333540883/k-fold-cross-validation-in-r
library(plyr)
library(randomForest)
data <- iris
# in this cross validation example, we use the iris data set to
# predict the Sepal Length from the other variables in the dataset
# with the random forest model
k = 5 #Folds
# sample from 1 to k, nrow times (the number of observations in the data)
data$id <- sample(1:k, nrow(data), replace = TRUE)
list <- 1:k
# prediction and testset data frames that we add to with each iteration over
# the folds
prediction <- data.frame()
testsetCopy <- data.frame()
#Creating a progress bar to know the status of CV
progress.bar <- create_progress_bar("text")
progress.bar$init(k)
for (i in 1:k){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data, id %in% list[-i])
testset <- subset(data, id %in% c(i))
# run a random forest model
mymodel <- randomForest(trainingset$Sepal.Length ~ ., data = trainingset, ntree = 100)
# remove response column 1, Sepal.Length
temp <- as.data.frame(predict(mymodel, testset[,-1]))
# append this iteration's predictions to the end of the prediction data frame
prediction <- rbind(prediction, temp)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy <- rbind(testsetCopy, as.data.frame(testset[,1]))
progress.bar$step()
}
# add predictions and actual Sepal Length values
result <- cbind(prediction, testsetCopy[, 1])
names(result) <- c("Predicted", "Actual")
result$Difference <- abs(result$Actual - result$Predicted)
# As an example use Mean Absolute Error as Evalution
summary(result$Difference)
result
createFolds(1:20)
ff <- createFolds(1:20)
ff[[1]]
-ff[[1]]
ff <- createFolds(1:20, K = 7)
ff <- createFolds(1:20, k = 7)
ff
createFolds
library(devtools)
install.packages("devtools")
devtools::use_package("caret")
ff <- createFolds(1:20, k = 5, returnTrain = T)
ff
ff <- createFolds(1:20, k = 5, returnTrain = F)
ff
?cvFit
?train
?dvm
?svm
?randomForest
install.packages("ada")
?ada
library(ada)
?ada
?train
colnames(feat_vec)
colnames(feat_vec)[3:6]
train(feat_vec[, colnames(feat_vec)[3:6]], feat_vec[, "label"], method="rf")
train(feat_vec[, colnames(feat_vec)[3:6]], feat_vec[, "lbl_col"], method="rf")
train(feat_vec[, 3:6], feat_vec[, "lbl_col"], method="rf")
sapply(feat_vec, class)
train(feat_vec[, 3:6], as.factor(feat_vec[, "lbl_col"]), method="rf")
warnings()
train(feat_vec[, 3:6], as.factor(feat_vec[, "lbl_col"]), method="svm")
train(feat_vec[, 3:6], as.factor(feat_vec[, "lbl_col"]), method="svmLinear")
warnings()
is.formula
plyr::is.discrete
plyr::is.formula
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/crossvalidation.R')
label_cset
ll <- label_cset[1:5, -unlist(label_cset@key)]
ll <- label_cset[1:5, -(unlist(label_cset@key))]
which(colnames(label_cset), unlist(label_cset@key))
match(colnames(label_cset), unlist(label_cset@key))
grep(colnames(label_cset), unlist(label_cset@key))
grep(unlist(label_cset@key), colnames(label_cset))
?match
unlist(label_cset@key) %in% colnames(label_cset)
match(colnames(label_cset), unlist(label_cset@key), nomatch=0)
match(colnames(label_cset), unlist(label_cset@key), nomatch=NULL)
length(match(colnames(label_cset), unlist(label_cset@key)))
?createFolds
library(QPackage)
data(walmart_bk_dataset)
data(bowker_bk_dataset)
c1 <- colnames(w)
<- walmart_bk_dataset
b <- bowker_bk_dataset
w <- walmart_bk_dataset
b <- bowker_bk_dataset
c1 <- colnames(w)
c2 <- colnames(b)
cmn <- setdiff(intersect(c1, c2), c(unlist(w@key), unlist(b@key))
)
lapply(cmn. rep, 2)
lapply(cmn, rep, 2)
l <- list(c("title", "title"), c("brand", "brand"))
l
attrs <- attr_corres[[1]]
attr_corres = NULL
if(is.null(attr_corres)) {
c1 <- colnames(w)
c2 <- colnames(b)
cmn <- setdiff(intersect(c1, c2), c(unlist(w@key), unlist(b@key)))
attr_corres <- lapply(cmn, rep, 2)
}
attrs <- attr_corres[[1]]
type(w[, attrs[1]]) == type(w[, attrs[2]])
class(w[, attrs[1]])
word_len <- function(s) {
length(strsplit(s, " "))
}
len1 <- lapply(w[, attrs[1]], word_len)
len2 <- lapply(b[, attrs[1]], word_len)
mean(len1)
len1[1:2]
mean(unlist(len1) )
len1 <- sapply(w[, attrs[1]], word_len)
len1[1:5]
len1 <- sapply(w[, attrs[1]], word_len, simplify=T)
len1 <- sapply(w[, attrs[1]], word_len, simplify=F)
len1[1:5]
?vapply
len1 <- vapply(w[, attrs[1]], word_len)
len1 <- apply(w[, attrs[1]], 1, word_len)
len1 <- lapply(w[, attrs[1]], word_len)
len1 <- unlist(len1)
mean(len1)
len1[1:10]
lapply(c("muruga sar", "saranam mur"), word_len)
strsplit("muruga sar", " ")
length(unlist(strsplit("muruga sar", " ")))
word_len <- function(s) {
length(unlist(strsplit(s, " ")))
}
len1 <- lapply(w[, attrs[1]], word_len)
len1 <- unlist(len1)
mean(len1)
median(len1)
a <- list()
b <- list()
b[1] <- list("lev")
b[2] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
b[3] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
a[["mws"]] <- b
b[[1]] <- list("lev")
b[[2]] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
b[[3]] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
a[["mws"]] <- b
a
a["mws"] <- b
a$mws <- b
a
a$mws[[1]] <- list("lev")
a
a$mws[1] <- list("lev")
a$mws
a$mws[1] <- list("lev")
a$mws[2] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
a$mws[3] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
b <- list()
b[[1]] <- list("lev")
b[[2]] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
b[[3]] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
a$mws <- b
kk <- a$mws
kk[[1]]
kk[[2]]
"tok_whitespace" %in% kk[[2]]
"tok_whitespace2" %in% kk[[2]]
check_valid <- function(s, simlist, toklist) {
if(any(s `%in` simlist) {
return(NULL)
}
if(any(s `%in` toklist))
return(NULL)
return(unlist(s))
}
check_valid <- function(s, simlist, toklist) {
if(any(s %in% simlist) {
return(NULL)
}
if(any(s %in% toklist))
return(NULL)
return(unlist(s))
}
check_valid <- function(s, simlist, toklist) {
if(any(s %in% simlist) {
return(NULL)
}
if(any(s %in% toklist))
return(NULL)
return(unlist(s))
}
check_valid <- function(s, simlist, toklist) {
s <- unlist(s)
if(any(s `%in%` simlist) {
return(NULL)
}
if(any(s `%in%` toklist))
return(NULL)
return(s)
}
s <- a$mws[1]
s
s <- unlist(s)
s
global_simlist <- c("jaccard, lev")
global_toklist <- c("tok_whitespace", "tok_gram")
allowed_simlist <- c("jaccard", "lev")
allowed_toklist <- c( "tok_gram")
avoid_simlist <- setdiff(global_simlist, allowed_simlist)
avoid_toklist <- setdiff(global_toklist, allowed_toklist)
s <- a$mws[2]
s
s <- unlist(s)
s %in% avoid_simlist
s %in% avoid_toklist
if(any(s %in% avoid_simlist)) { print("mur")}
if(any(s %in% avoid_toklist)) { print("mur")}
check_valid <- function(s, simlist, toklist) {
s <- unlist(s)
if(any(s %in% simlist)) {
return(NULL)
}
if(any(s %in% toklist))
return(NULL)
return(s)
}
valid_list <- lapply(mws, check_valid, avoid_simlist, avoid_toklist)
mws <- a$mws
valid_list <- lapply(mws, check_valid, avoid_simlist, avoid_toklist)
valid_list
valid_list <- valid_list[!sapply(valid_list, is.null)]
valid_list
allowed_toklist <- c( "tok_qgram")
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
fn_str <- do.call(fill_fn_template, list(c(l, s)))
fn_obj <- eval(parse(text = fnstr))
}
lapply(valid_list, fill_fn, attrs)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
print(s)
print(l)
fn_str <- do.call(fill_fn_template, list(c(l, s)))
fn_obj <- eval(parse(text = fnstr))
}
lapply(valid_list, fill_fn, attrs)
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
print(s)
print(l)
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fnstr))
}
lapply(valid_list, fill_fn, attrs)
do.call(fill_fn_template, list("title", "title, "lev"))
do.call(fill_fn_template, list("title", "title", "lev"))
s <- list("lev")
l <- list("title", "title")
c(l, s)
do.call(fill_fn_template, c(l, s))
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
print(s)
print(l)
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fnstr))
}
lapply(valid_list, fill_fn, attrs)
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
print(s)
print(l)
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fn_str))
}
lapply(valid_list, fill_fn, attrs)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attrs)
do.call(fill_fn_template, c(l, s))
l
c(l, s)
do.call(fill_fn_template, c(l, s))
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attrs)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attrs)
l
lapply(l)
lapply(l, list)
lapply(unlist(l), list)
lapply(valid_list, fill_fn, attrs)
attr_list <- lapply(attrs, list)
lapply(valid_list, fill_fn, attr_list)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
l
attr_list
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
fns <- lapply(valid_list, fill_fn, attr_list)
fns
get_names <- function(s) {
nrow(w)
}
get_names(10)
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["tok_qgram"] <- "qgm"
dict["lev"] <- lev
dict <- list()
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["tok_qgram"] <- "qgm"
dict["lev"] <- lev
dict["lev"] <- "lev"
dict
dict[c("lev", "tok_whitespace")]
unlist(dict[c("lev", "tok_whitespace")])
dict[c("lev", NULL, "tok_whitespace")]
c(dict[c("lev", NULL, "tok_whitespace")])
paste(dict[c("lev", NULL, "tok_whitespace")], "_")
paste(dict[c("lev", NULL, "tok_whitespace")], "")
paste0(dict[c("lev", NULL, "tok_whitespace")], "")
?paste0
paste0(dict[c("lev", NULL, "tok_whitespace")], sep="_")
paste0(dict[c("lev", NULL, "tok_whitespace")], sep="")
paste0(paste0(dict[c("lev", NULL, "tok_whitespace")], sep=""), "_"
)
(paste0(dict[c("lev", NULL, "tok_whitespace")], sep="", collapse="_")
)
x <- sample(1000)
devtools::use_data(x, mtcars, internal = TRUE)
?paste0
