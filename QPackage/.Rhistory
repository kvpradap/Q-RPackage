library(QPackage)
jaccard(t1, t2)
jaccard(t1, t2)
jaccard(t1, t2)
d1 = 10
d1 = d2 = 0
(d1-d2)/max(d1, d2)
abs((d1-d2)/max(d1, d2))
diff_vals(10, 20)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
diff_vals(10, 20)
adist(10, 20)
lev(10, 20)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
lev(10, 20)
lev(10, 20)
adist(10, "")
adist(10, NA)
adist(10, NULL)
adist(NULL, NULL)
s <- "jac_1"
"jac_1" <- function(a, b) { return(a+b)}
jac_1(5, 10)
as.character(substitute(s)) <- function(a, b) { return(a+b)}
(substitute(s)) <- function(a, b) { return(a+b)}
substitute(s) <- function(a, b) { return(a+b)}
deparse(substitute(s)) <- function(a, b) { return(a+b)}
deparse(substitute(s))
`deparse(substitute(s))`
kk<-deparse(substitute(s))
`kk`
`kk` <- function(a, b) { return a + b}
assign(kk, function(a, b) { return(a + b)})
kk(10, 5)
assign(`kk`, function(a, b) { return(a + b)})
s(10, 5)
assign(kk, function(a, b) { return(a + b)})
kk(5, 10)
s(10, 6)
s <- "jac_1"
assign(deparse(substitute(s)), function(a, b) { return(a+b)})
jac_1(10, 5)
fn <- function(a, b) { return (a-b)}
assign(deparse(substitute(s)), fn)
jac_1(10, 5)
assign(deparse(substitute(s)), function(a, b) { return(a-b)})
jac_1(10, 5)
s <- "jac_1"
assign(deparse(substitute(s)), function(a, b) { return(a-b)})
s(10, 5)
jac_1(10, 5)
assign("jac_1", function(a, b) { return(a-b)})
jac_1(10, 5)
assign("jac_1", function(a, b) { return(a*b)})
jac_1(10, 5)
fn <- function(a, b) {}
fn <- function(a, b) { return(2*a + b)}
assign("jac_1", fn)
jac_1(10, 5)
fn <- function(a, b) { return(2*a + b)}
assign("jac_1", fn)
k = list()
k[[1]] = "10"
k[[2]] = "20"
k
k[[5]] = "40"
k
parse("jac_1")
deparse("jac_1")
substitute("jac_1")
ll <- assign("jac_1", fn)
ll
substitute(ll)
as.symbol("jac_1")
get_fn_list <- function() {
list_fns <- list()
s <- "jac_1"
fn <- function(a, b) { return(a +b)}
assign(deparse(substitute(s)), fn)
list_fns[[1]] <- as.symbol(deparse(substitute(s)))
s <- "jac_2"
fn <- function(a, b) { return(a - b)}
assign(deparse(substitute(s)), fn)
list_fns[[1]] <- as.symbol(deparse(substitute(s)))
}
get_fn_list <- function() {
list_fns <- list()
s <- "jac_1"
fn <- function(a, b) { return(a +b)}
assign(deparse(substitute(s)), fn)
list_fns[[1]] <- as.symbol(deparse(substitute(s)))
s <- "jac_2"
fn <- function(a, b) { return(a - b)}
assign(deparse(substitute(s)), fn)
list_fns[[2]] <- as.symbol(deparse(substitute(s)))
return(list_fns)
}
kk <- get_fn_list()
kk
tt <- kk[[1]]
tt(10, 5)
kk[[1]](10, 5)
as.function(kk[[1]])
as.function(kk)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
kk <- get_fn_list()
kk
kk[[1]](10, 5)
names(kk)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
kk <- get_fn_list()
kk <- list()
kk["jac1"] <- "temp"
kk["jac1"] <- function (a, b) { return(10)}
kk[["jac1"] <- function (a, b) { return(10)}
kk[["jac1"]] <- function (a, b) { return(10)}
kk
kk$jac1(10, 5)
get_fn_list <- function() {
list_fns <- list()
fn <- function(a, b) { return(a +b)}
assign(deparse(substitute(s)), fn)
#list_fns[[1]] <- as.symbol(deparse(substitute(s)))
list_fns[["jac_1"]] <- fn
s <- "jac_2"
fn <- function(a, b) { return(a - b)}
assign(deparse(substitute(s)), fn)
#list_fns[[2]] <- as.symbol(deparse(substitute(s)))
list_fns[["jac_2"]] <- fn
return(list_fns)
}
kk <- get_fn_list()
kk
as.function("fn <- function(a, b) { return (a + b) } ")
parse("fn <- function(a, b) { return (a + b) } ")
deparse("fn <- function(a, b) { return (a + b) } ")
eval("fn <- function(a, b) { return (a + b) } ")
tt <- eval("fn <- function(a, b) { return (a + b) } ")
tt
type(tt)
expression("fn <- function(a, b) { return (a + b) } ")
eval(expression("fn <- function(a, b) { return (a + b) } "))
eval(expression(fn <- function(a, b) { return (a + b) } ))
fn
eval(expression(fn <- function(a, b) { return (a - b) } ))
fn
eval(parse(text = "fn <- function(a, b) { return (a + b) } "))
eval(parse(text = "fn <- function(a, b) { return (a * b) } "))
fn
library(RPackage)
library(QPackage)
library(QPackage)
library(QPackage)
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
nrow(walmart)
colnames(walmart)
nrow(bowker)
status <- check_id(walmart, list("id"))
status
status <- set_id(walmart, list("id"))
print(status)
status <- check_id(bowker, list("id"))
print(status)
status <- set_id(bowker, list("id"))
print(status)
colnames(bowker)
any(is.na(bowker["isbn"]))
(is.na(bowker["isbn"]))
sum(is.na(bowker["isbn"]))
sum(is.na(walmart["isbn"]))
colnames(walmart)
colnames(bowker)
cand_set <-  apply_block(walmart, amazon, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher"), col_names_b = list("title", "author", "binding", "publisher"))
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher"), col_names_b = list("title", "author", "binding", "publisher"))
source('~/Documents/Research/R-Package/Q-RPackage/QPackage/R/workflow.R')
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher"), col_names_b = list("title", "author", "binding", "publisher"))
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher"), col_names_b = list("title", "author", "binding", "publisher"))
attr1 <- "isbn"
attr2 <- "isbn"
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher"), col_names_b = list("title", "author", "binding", "publisher"))
edit(cand_set)
View(cand_set)
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher"), col_names_b = list("title", "author", "binding", "publisher"))
sapply(walmart, class)
sapply(bowker, class)
fn_list <- create_features()
fn_list
library(QPackage)
View(cand_set)
?match
?merge
s <- match(cand_set, walmart, by.x="A.id", by.y="id")
s <- merge(cand_set, walmart, by.x="A.id", by.y="id")
s
is.data.frame(s)
View(s)
s[1,]
colnames(cand_set)
s[, -colnames(cand_set)]
match(colnames(s), colnames(cand_set))
cand_set@key
?agrep
?grep
grep("A.", unlist(cand_set@key))
grep("B.", unlist(cand_set@key))
grep("B.", unlist(cand_set@key))
grep("B.", unlist(cand_set@key))
grep("B", unlist(cand_set@key))
grep("B", unlist(cand_set@key))
regrxpr("B", unlist(cand_setx@key))
regexpr("B", unlist(cand_setx@key))
regexpr("B", unlist(cand_set@key))
grepl("B.", unlist(cand_set@key))
grepl("B.", c("B.id1", "B.id2", "C.id")
)
grepl("B.", c("B.id1", "B.id2", "C.id"))
grepx("B.", c("B.id1", "B.id2", "C.id"))
grep("B.", c("B.id1", "B.id2", "C.id"))
grep("B1.", c("B.id1", "B.id2", "C.id"))
grep("B1.", c("B.id1", "B.id2", "C.id")) == 0
grep("B1.", c("B.id1", "B.id2", "C.id"))
grep("B1.", c("B.id1", "B.id2", "C.id")) == integer(0)
is.null(grep("B1.", c("B.id1", "B.id2", "C.id")) )
is.logical(grep("B1.", c("B.id1", "B.id2", "C.id")) )
is.integer(grep("B1.", c("B.id1", "B.id2", "C.id")) )
as.numeric(grep("B1.", c("B.id1", "B.id2", "C.id")) )
v <- as.numeric(grep("B1.", c("B.id1", "B.id2", "C.id")) )
v == 0
is.null(v == 0)
is.null(v == F)
(v == F)
as.integer(grep("B1.", c("B.id1", "B.id2", "C.id")) )
keys <- unlist(cand_set@key)
tbl_a_idx <- grep("A.", keys)
tbl_a_idx
tbl_a_key <- keys[tbl_a_idx]
cset_a <- match(walmart, cand_set, by.x = unlist(walmart@key), by.y = tbl_a_key)
cset_a <- merge(walmart, cand_set, by.x = unlist(walmart@key), by.y = tbl_a_key)
cset_a
View(cset_a)
tbl_b_idx <- grep("B.", keys)
tbl_b_key <- keys[tbl_b_idx]
tbl_b_key
cset_b <- merge(bowker, cand_set, by.x = unlist(walmart@key), by.y = tbl_b_key)
View(cset_b)
cset_b[1:2, "pages"]
as.numeric(cset_b[1:2, "pages"])
length(cset_b[1:2, "pages"])
vv <- cset_b[1:2, "pages"]
length(vv)
apply(vv, 1, length)
lapply(vv, length)
v[1] = NULL
lapply(vv, length)
lapply(vv, is.null)
cset_a_small <- cset_a[1:5, ]
cset_b_small <- cset_b[1:5, ]
fn_list <- create_features()
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
library(rJava)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
install.packages(rJava)
install.packages('rJava')
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(rJava)
library(rJava)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
library(rJava)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
library(QPackage)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
status <- set_id(walmart, list("id"))
print(status)
# -- bowker
print("Importing bowker data")
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
print(read_status)
status <- check_id(bowker, list("id"))
print(status)
# set id
status <- set_id(bowker, list("id"))
print(status)
attr1 <- "isbn"
attr2 <- "isbn"
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher", "pages"), col_names_b = list("title", "author", "binding", "publisher", "pages"))
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
keys <- unlist(cand_set@key)
tbl_a_idx <- grep("A.", keys)
if(!is.integer0(tbl_a_idx)) {
tbl_a_key <- keys[tbl_a_idx]
cset_a <- merge(walmart, cand_set, by.x = unlist(walmart@key), by.y = tbl_a_key)
}
tbl_b_idx <- grep("B.", keys)
if(!is.integer0(tbl_b_idx)) {
tbl_b_key <- keys[tbl_b_idx]
cset_b <- merge(bowker, cand_set, by.x = unlist(walmart@key), by.y = tbl_b_key)
}
cset_a_small <- cset_a[1:5, ]
cset_b_small <- cset_b[1:5, ]
fn_list <- create_features()
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
javareconf
library(rJava)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
Sys.getenv('JAVA_HOME')
Sys.setenv("/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre")
Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre")
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
library(rJava)
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
install.packages('rJava', type='source')
install.packages("rJava", type = "source")
remove.packages("rJava")
install.packages("rJava", type = "source")
install.packages("rJava")
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
# set id
status <- set_id(walmart, list("id"))
print(status)
# -- bowker
print("Importing bowker data")
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
print(read_status)
# check id
status <- check_id(bowker, list("id"))
print(status)
# set id
status <- set_id(bowker, list("id"))
print(status)
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
# set id
status <- set_id(walmart, list("id"))
print(status)
# -- bowker
print("Importing bowker data")
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
print(read_status)
# check id
status <- check_id(bowker, list("id"))
print(status)
# set id
status <- set_id(bowker, list("id"))
print(status)
library(QPackage)
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
# set id
status <- set_id(walmart, list("id"))
print(status)
# -- bowker
print("Importing bowker data")
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
print(read_status)
# check id
status <- check_id(bowker, list("id"))
print(status)
# set id
status <- set_id(bowker, list("id"))
print(status)
attr1 <- "isbn"
attr2 <- "isbn"
cand_set
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher", "pages"), col_names_b = list("title", "author", "binding", "publisher", "pages"))
{
is.integer(x) && length(x) == 0L
}
keys <- unlist(cand_set@key)
tbl_a_idx <- grep("A.", keys)
if(!is.integer0(tbl_a_idx)) {
tbl_a_key <- keys[tbl_a_idx]
cset_a <- merge(walmart, cand_set, by.x = unlist(walmart@key), by.y = tbl_a_key)
}
tbl_b_idx <- grep("B.", keys)
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
keys <- unlist(cand_set@key)
tbl_a_idx <- grep("A.", keys)
if(!is.integer0(tbl_a_idx)) {
tbl_a_key <- keys[tbl_a_idx]
cset_a <- merge(walmart, cand_set, by.x = unlist(walmart@key), by.y = tbl_a_key)
}
tbl_b_idx <- grep("B.", keys)
if(!is.integer0(tbl_b_idx)) {
tbl_b_key <- keys[tbl_b_idx]
cset_b <- merge(bowker, cand_set, by.x = unlist(walmart@key), by.y = tbl_b_key)
}
cset_a_small <- cset_a[1:5, ]
cset_b_small <- cset_b[1:5, ]
View(cset_b_small)
fn_list <- create_features()
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
View(cand_set)
cset_a_small
cset_a_small[1, "title"]
cset_b_small[1, "title"]
View(cset_a)
View(cand_set)
View(cand_set)
View(cset_a_small)
View(cset_a_small)
View(cset_a)
View(cand_set)
cand_set[23, ]
key[match(walmart["id"], cand_set["A.id"])]
key[match(walmart["id"], cand_set["A.id"]), ]
walmart[match(walmart["id"], cand_set["A.id"]), ]
cset_a_small["A.Id"]
cset_a_small["A.id"]
cset_a_smal["id"]
colnames(cset_a_small)
cset_a_smal[, "id"]
cset_a_small[, "id"]
match(cand_set[, "id"], cset_a_small["id"])
match(cand_set[, "id"], cset_a_small[, "id"])
match(cand_set[, "A.id"], cset_a_small[, "id"])
cand_set[match(cand_set[, "A.id"], cset_a_small[, "id"], )
)
cand_set[match(cand_set[, "A.id"], cset_a_small[, "id"], ]
cand_set[match(cand_set[, "A.id"], cset_a_small[, "id"]),  ]
match(cand_set[, "A.id"], cset_a_small[, "id"])
!is.na(match(cand_set[, "A.id"], cset_a_small[, "id"]))
kk <- !is.na(match(cand_set[, "A.id"], cset_a_small[, "id"]))
tt <- match(bowker[, "B.id"], cset_b_small[, "id"])
tt <- match(bowker[, "id"], cset_b_small[, "id"])
sort(tt)
tt1 <- nrow(tt)
tt1
tt1 <- seq(nrow(tt))
tt1
tt
tt[!is.na(tt)]
tt
tt[5]
bb <- bowker[tt[!is.na(tt)], ]
bb[1, "title"]
bb[, "title"]
merge.with.order <- function(x,y, ..., sort = T, keep_order = 1)
{
# this function works just like merge, only that it adds the option to return the merged data.frame ordered by x (1) or by y (2)
add.id.column.to.data <- function(DATA)
{
data.frame(DATA, id... = seq_len(nrow(DATA)))
}
# add.id.column.to.data(data.frame(x = rnorm(5), x2 = rnorm(5)))
order.by.id...and.remove.it <- function(DATA)
{
# gets in a data.frame with the "id..." column.  Orders by it and returns it
if(!any(colnames(DATA)=="id...")) stop("The function order.by.id...and.remove.it only works with data.frame objects which includes the 'id...' order column")
ss_r <- order(DATA$id...)
ss_c <- colnames(DATA) != "id..."
DATA[ss_r, ss_c]
}
# tmp <- function(x) x==1; 1	# why we must check what to do if it is missing or not...
# tmp()
if(!missing(keep_order))
{
if(keep_order == 1) return(order.by.id...and.remove.it(merge(x=add.id.column.to.data(x),y=y,..., sort = FALSE)))
if(keep_order == 2) return(order.by.id...and.remove.it(merge(x=x,y=add.id.column.to.data(y),..., sort = FALSE)))
# if you didn't get "return" by now - issue a warning.
warning("The function merge.with.order only accepts NULL/1/2 values for the keep_order variable")
} else {return(merge(x=x,y=y,..., sort = sort))}
}
merge.with.order(bowker, cand_set, by.x = "id", by.y = "B.id", keep_order = 2)
tt2 <- merge.with.order(bowker, cand_set, by.x = "id", by.y = "B.id", keep_order = 2)
tt2[1:5, "title"]
tt3 <- merge.with.order(walmart, cand_set, by.x = "id", by.y = "A.id", keep_order = 2)
tt3[1:5, "title"]
cset_a <- merge.with.order(walmart, cand_set, by.x = unlist(walmart@key), by.id = tbl_a_key, keep_order = 2)
cset_a <- merge.with.order(walmart, cand_set, by.x = unlist(walmart@key), by.y = tbl_a_key, keep_order = 2)
cset_b <- merge.with.order(bowker, cand_set, by.x = unlist(bowker@key), by.y = tbl_b_key, keep_order = 2)
cset_a[1:5, "title"]
cset_b[1:5, "title"]
apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
cset_a_small <- cset_a[1:5, ]
cset_b_small <- cset_b[1:5, ]
fn_list <- create_features()
feat_vec <- apply_feat_fn_over_2tables(cset_a_small, cset_b_small, fn_list)
feat_vec
c_set_a[, c("publisher", "title", "price")]
cset_a_small[, c("publisher", "title", "price")]
cset_a_small[, c("publisher", "title", "pages")]
cset_b_small[, c("publisher", "title", "pages")]
