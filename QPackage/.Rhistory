library(QPackage)
install.packages('rJava')
install.packages('rJava')
quit()
q()
?strsplit
data(bowker_bk_dataset)
b <- bowker_bk_dataset
strsplit("muruga saranam", " ")
fn <- function(s) { length(strsplit(s, " "))}
kk <- lapply(b[, "title"], fn)
kk
fn <- function(s) { length(unlist(strsplit(s, " ")))}
kk <- lapply(b[, "title"], fn)
kk
kk1 <- lapply(w[, "title"], fn)
data(walmart_bk_dataset)
w <- walmart_bk_dataset
kk1 <- lapply(w[, "title"], fn)
mean(unlist(kk1))
mean(unlist(kk))
a <- list()
b <- list()
b[[1]] <- list("jaro")
b[[2]] <- list("jaro_winkler")
b[[3]] <- list("lev")
b[[4]] <- list("soundex")
b[[5]] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
b[[6]] <- list("exact_match")
a[["SINGLE_WORD"]] <- b
a
a <- list()
b <- list()
b[1] <- list("jaro")
b[2] <- list("jaro_winkler")
a["sws"] <- b
a[["sws"]] <- b
a
a$sws
a$sws[[1]]
lapply(a$sws, funtion(s) { c(list("brand", "brand"), s)})
lapply(a$sws, funtion(s) { c(list("brand", "brand"), s) })
fn1 <-function(s) {c(list("brand", "brand"), s)}
lapply(a$sws, fn1)
lapply(unlist(a$sws), funtion(s) { c(list("brand", "brand"), s) })
lapply(unlist(a$sws), fn1)
ll <- lapply(unlist(a$sws), fn1)
fn3 <- function(s) { do.call(fill_fn_template(s))}
lapply(ll, fn3)
fn3 <- function(s) { do.call(fill_fn_template, s)}
lapply(ll, fn3)
ff <- lapply(ll, fn3)
fn4 <- function(s) { eval(parse(text = s))}
ff2 <- lapply(ff, fn4)
ff2
names(ff2)
rownames(ff2)
names(ff2) <- c("p1", "p2")
ff2
a
fn6 <- function(s, f) { if(! s %in% f) { return s}}
fn6 <- function(s, f) { if(! s %in% f) { return(s)}}
lapply(a$sws, fn6, c("jaro"))
nn <- lapply(a$sws, fn6, c("jaro"))
is.null(nn)
lapply(nn, na.omit)
ll[!lapply(ll,is.null)]
nn[!lapply(nn,is.null)]
lapply(nn, is.null)
!lapply(nn, is.null)
sapply(nn, is.null)
!sapply(nn, is.null)
ll[!sapply(nn, is.null)]
nn[!sapply(nn, is.null)]
__kk
__kk <- 10
kk... <- 10
kk..... <- 10
kk.. <- 10
kk... <- 10
word_len <- function(s) {
length(unlist(strsplit(s, " ")))
>>>>>>> Stashed changes
}
# check if the recommened function involves blacklisted sim functions or tokenizers
check_valid <- function(s, simlist, toklist) {
s <- unlist(s)
if(any(s %in% simlist)) {
return(NULL)
}
if(any(s %in% toklist))
return(NULL)
return(s)
}
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
print(s)
print(l)
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fn_str))
}
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
id_fun <- function(inp) {
inp
}
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
length(simli)
length(simlist)
simlist
get_fn_objs <- function(attrs, rec_fns, allowed_simlist, allowed_toklist) {
allowed_simlist <- unlist(allowed_simlist)
allowed_toklist <- unlist(allowed_toklist)
avoid_simlist <- c()
avoid_toklist <- c()
if(length(allowed_simlist) > 0)
avoid_simlist <- setdiff(QPackage:::gbl_sim_fns..., allowed_simlist)
if(length(allowed_tok_list) > 0)
avoid_toklist <- setdiff(QPackage:::gbl_toks..., allowed_toklist)
# remove heuristics that involve simfns and tokenizers in the black list
valid_list <- lapply(rec_fns, check_valid, avoid_simlist, avoid_toklist)
# remove null
valid_list <- valid_list[!sapply(valid_list, is.null)]
attr_list <- lapply(attrs, id_fun)
fn_objs <- lapply(valid_list, fill_fn, attr_list)
return(fn_objs)
}
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
get_fn_objs <- function(attrs, rec_fns, allowed_simlist, allowed_toklist) {
allowed_simlist <- unlist(allowed_simlist)
allowed_toklist <- unlist(allowed_toklist)
avoid_simlist <- c()
avoid_toklist <- c()
if(length(allowed_simlist) > 0)
avoid_simlist <- setdiff(QPackage:::gbl_sim_fns..., allowed_simlist)
if(length(list) > 0)
avoid_toklist <- setdiff(QPackage:::gbl_toks..., allowed_toklist)
# remove heuristics that involve simfns and tokenizers in the black list
valid_list <- lapply(rec_fns, check_valid, avoid_simlist, avoid_toklist)
# remove null
valid_list <- valid_list[!sapply(valid_list, is.null)]
attr_list <- lapply(attrs, id_fun)
fn_objs <- lapply(valid_list, fill_fn, attr_list)
return(fn_objs)
}
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
fill_fn <- function(s, l) {
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fn_str))
}
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
QPackage:::auto_gen_table...$MWM
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
valid_list
avoid_sim
avoid_simlist
avoid_toklist
allowed_toklist
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
valid_list
fn_objs
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
l
c(l, s)
c(l, s)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
valid_list
rec_fns
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
valid_list
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
valid_list
fn_objs
dict <- list()
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["tok_qgram"] <- "qgm"
dict["lev"] <- "lev"
tt <- list("lev", NULL, "jaccard")
dict[tt]
dict[unlist(tt)]
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
getnames(valid_list, attrs)
get_names(valid_list, attrs)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
fn_objs
nms
nms
valid_list
attrs
v1 <- valid_list[[3]]
v1
v2 <- unlist(v1)
v2
QPackage:::feat_lkp_names...[v2]
unlist(QPackage:::feat_lkp_names...[v2])
as.vector(QPackage:::feat_lkp_names...[v2])
paste0(attrs, QPackage:::feat_lkp_names...[v2], sep="", collapse="_")
attrs
a1 <- paste0(attrs, sep="", collapse="_")
a1
a2 <- paste0(QPackage:::feat_lkp_names...[v2], sep="", collapse="_")
a2
paste0(a1, a2, sep="", collapse="_")
paste0(a1, "__", a2, sep="", collapse="_")
paste0(a1, "_", a2, sep="", collapse="_")
paste0(a1, a2, sep="_", collapse="_")
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
nms
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("cosine"), list())
nms
fn_objs
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list(), list())
fn_objs
fn_objs
nms
fn_objs
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard"), list())
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard", "cosine"), list())
get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard", "cosine"), list("tok_qgram"))
l <- list()
kk <- get_fn_objs(c("title", "title"), QPackage:::auto_gen_table...$MWM, list("jaccard", "cosine"), list("tok_qgram"))
kk <- c(kk, l)
kk
w <- table_a[1:50, ]
b <- table_b[1:50, ]
w <- table_a[1:5, ]
b <- table_b[1:5, ]
names(w)
cmn <- setdiff(intersect(c1, c2), c(unlist(table_a@key), unlist(table_b@key)))
cmn
names(w)
sapply(w, class)
sapply(w, typeof)
sapply(w, mode)
sapply(b, mode)
mode(table_a[, attrs[1]])
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
fn_obj
fn_obj
fn_obj_list
fn_list
ll <- list("jaccard", 3, "tok_qgram" )
dict <- list()
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["tok_qgram"] <- "qgm"
dict["lev"] <- "lev"
dict["cosine"] <- "cos"
dict["monge_elkan"] <- "mel"
dict["needleman_wunsch"] <- "nmw"
dict["smith_waterman"] <- "sw"
dict["smith_waterman_gotoh"] <- "swg"
dict["jaro"] <- "jar"
dict["jaro_winkler"] <- "jwn"
dict["soundex"] <- "sdx"
dict["exact_match"] <- "exm"
dict["abs_diff"] <- "adf"
dict["rel_diff"] <- "rdf"
dict["1"] <- "1"
dict["2"] <- "2"
dict["3"] <- "3"
dict["4"] <- "4"
dict[ll]
ll
dict[unlist(ll)]
feat_lkp_names... <- dict
save(feat_lkp_names..., file = "R/sysdata.rda")
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
save(feat_lkp_names..., auto_gen_table..., gbl_sim_fns..., gbl_toks..., file = "R/sysdata.rda")
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
library(QPackage)
fn_list <- create_features(w, b, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
fn_obj_list
fn_list
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/books/walmart.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
# set id
status <- set_id(walmart, list("id"))
print(status)
# -- bowker
print("Importing bowker data")
bowker <- read_csv("../QPackage/inst//extdata/books/bowker.csv", status = read_status)
print(read_status)
# check id
status <- check_id(bowker, list("id"))
print(status)
# set id
status <- set_id(bowker, list("id"))
print(status)
attr1 <- "isbn"
attr2 <- "isbn"
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author", "binding", "publisher", "pages"), col_names_b = list("title", "author", "binding", "publisher", "pages"))
sampled_data <- sample_qtable(cand_set, 25)
labeled_data <- label_data(sampled_data)
attr1 <- "isbn"
attr2 <- "isbn"
cand_set <-  apply_block(walmart, bowker, attr_equiv_block, attr1, attr2, col_names_a = list("title", "author"), col_names_b = list("title", "author"))
sampled_data <- sample_qtable(cand_set, 25)
labeled_data <- label_data(sampled_data)
feature_list <- create_features(walmart, bowker, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/create-feature-fns.R')
feature_list <- create_features(walmart, bowker, list(c("title", "title"), c("numAuthors", "numAuthors"), c("binding", "binding")))
head(feature_list)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
tok_whitespace("muruga saranam")
monge_elkan("tmep", "tmeo")
needleman_wunsch("tmep", "tmeo")
needleman_wunsch("tmep", "tmeo")
library(rJava)
needleman_wunsch("tmep", "tmeo")
needleman_wunsch("tmep", "tmeo")
library(QPackage)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/apply-feature-fns.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
ret_df
nrow(ret_df)
ncol(ret_df)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/apply-feature-fns.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
labeled_feat_vec[, 1:3]
library(rpart)
acc_rf <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
library(randomForest)
install.packages('randomFores')
install.packages('randomForest')
library(randomForest)
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
acc_dt <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
library(e1071)
install.packages('e1071')
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
model <- train_model(labeled_feat_vec, randomForest)
candset_feat_vec <- convert_to_feature_vecs(walmart, bowker, cand_set, feature_list)
candset_fv_with_labels<- predict_label(candset_feat_vec, model)
View(merge(cand_set,candset_fv_with_labels))
feature_list <- create_features(walmart, bowker)
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
labeled_feat_vec <- convert_to_feature_vecs(walmart, bowker, labeled_data, feature_list)
View(labeled_feat_vec)
library(rpart)
acc_dt <- cv_kfold(labeled_feat_vec, 10, rpart, predict_args = list(type = "class"))
library(randomForest)
acc_rf <- cv_kfold(labeled_feat_vec, 10, randomForest)
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
library(e1071)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
library(QPackage)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
names(feat_table)
is.data.frame(feat_table)
feat_table <- data.frame(feat_table)
feat_table[, "label"] <- as.factor(feat_table[, "label"])
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
library(QPackage)
acc_svm <- cv_kfold(labeled_feat_vec, 10, svm)
feat_table[, "lang_lang_nmw"]
feat_table[, "lang_lang_nmw"]
feat_table[, "lang_lang_swg"]
feat_table[, "editionDescr_editionDescr_swg"]
model
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/crossvalidation.R')
library(QPackage)
model <- train_model(labeled_feat_vec, randomForest)
candset_feat_vec <- convert_to_feature_vecs(walmart, bowker, cand_set, feature_list)
candset_fv_with_labels<- predict_label(candset_feat_vec, model)
View(merge(cand_set,candset_fv_with_labels))
install.packages('knitr')
library(knitr)
devtools::use_vignette("qpkg-vignette")
library(QPackage)
library(QPackage)
data(bowker_bk_dataset)
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
?write.csv
library(QPackage)
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/export-data.R')
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/export-data.R')
write_csv(bowker_bk_dataset, file="/scratch/pradap/bowker.csv")
Inf - Inf
mean(c(1, NULL, 3))
mean(c(1, NA, 3))
library(QPackage)
tok_whitespace("pradap mur")
tok_whitespace("pradap m ur")
library(QPackage)
remove.packages(rJava)
remove.packages(rJava, lib.loc="/scratch/pradap/r-libs/")
remove.packages("rJava", lib.loc="/scratch/pradap/r-libs/")
?remove.packages
remove.packages("rJava", lib="/scratch/pradap/r-libs/")
remove.packages("rJava")
.libPaths
.libPaths()
install.packages("stringdist")
library(stringdist)
?stringdist::qgrams
library(rJava)
<<<<<<< Updated upstream
library(QPac)
library(QPackage)
?stringdist::qgrams
qgrams('', 3)
qgrams('', q = 3)
qgrams(NA, q = 3)
is.na(qgrams(NA, q = 3))
ss <- (qgrams(NA, q = 3))
ss
is.null(ss)
class(s)
class(ss)
View(ss)
ss <- (qgrams(NULL, q = 3))
ss
ss[,1]
ss[1,1]
ss[1]
ss[1,]
is.integer(ss[1,])
.libPaths()
Q
exit()
quit()
.libPaths
.libPaths()
find.package("rJava")
install.packages("rJava")
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
?install.packages
?devtools::install_github
tuple(10,20)
library(QPackage)
library(QPackage)
install.packages('rJava')
library(QPackage)
remove.packages('rJava')
install.packages('rJava')
library(QPackage)
install.packages('rJava')
library(QPackage)
library(QPackage)
library(QPackage)
tuple(10)
tuple("title" = "This is a product title", "brand" = "Product brand")
t <- tuple("title" = "This is a product title", "brand" = "Product brand")
t
print(t)
