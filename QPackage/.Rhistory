s1 <- cbind(sampled_table, "label")
s1
s1 <- cbind(sampled_table, "label" = c())
s1
?cbind
s1 <- cbind(sampled_table, data.frame(label=1:nrow(sampled_table)))
s1
rep(0, 1)
rep(0, 5)
s1 <- cbind(sampled_table, data.frame("label(0/1)"= rep(0, nrow(sampled_table))
)
))
s1 <- cbind(sampled_table, data.frame("label(0/1)"= rep(0, nrow(sampled_table))))
s1
s1 <- cbind(sampled_table, data.frame("label\(0/1\)"= rep(0, nrow(sampled_table))))
s1 <- cbind(sampled_table, data.frame("label\\(0/1\\)"= rep(0, nrow(sampled_table))))
s1
s1 <- cbind(sampled_table, data.frame("label"= rep(0, nrow(sampled_table))))
fix(s1)
?fix
mean <- edit(s1, editor = "xedit")
vim(s1)
vi(s1)
data.entry(s1)
fix(s1)
s1 <- cbind(sampled_table, data.frame("label\\(0/1\\)"= rep(0, nrow(sampled_table))))
fix(s1)
fix(s1)
s1 <- cbind(sampled_table, data.frame("label"= rep(0, nrow(sampled_table))))
s1 <- edit(s1)
s1
edit(s1)
edit(s1, title="Pradap")
"label" %in% s1
"label" %in% names(s1)
s <- sample_qtable(cs)
data(acm_dataset)
data(dblp_dataset)
cs <- attr_equiv_block(acm_dataset, dblp_dataset, "year", "year", list("venue", "author"), list("venue", "author"))
cs <- attr_equiv_block(acm_dataset, dblp_dataset, "year", "year", list("venue", "authors"), list("venue", "authors"))
names(Cs)
head(cs)
sampled_data <- sample_qtable(cs, 25)
sampled_data
View(sampled_data)
labeled_data <- label_data(sampled_data)
edit label_data
library(QPackage)
labeled_data <- label_data(sampled_data)
labeled_data <- label_data(sampled_data)
rownames(labeled_data) <- NULL
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/label-data.R')
rownames(labeled_data) <- NULL
key <- sampled_data@key
key
labeled_data <- cbind(sampled_data, label = rep(0, nrow(sampled_data)))
nrow(sampled_data)
names(sampled)
names(sampled_data)
is.data.frame(sampled_data)
cbind(sampled_data, label=1:25)
sampled_data
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/sample-data.R')
sampled_data <- sample_qtable(cs, 25)
sampled_data
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/sample-data.R')
sampled_data <- sample_qtable(cs, 25)
sampled_data
sampled_data[1:2,]
labeled_data <- label_data(sampled_data)
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/label-data.R')
labeled_data <- label_data(sampled_data)
ss <- as.data.frame(sampled_data)
ss
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/label-data.R')
labeled_data <- label_data(sampled_data)
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/label-data.R')
labeled_data <- label_data(sampled_data)
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/sample-data.R')
sampled_data <- sample_qtable(cs, 25)
sampled_data
labeled_data <- label_data(sampled_data)
cs <- attr_equiv_block(acm_dataset, dblp_dataset, c("year", "title") , c("year", "title"), list("venue", "authors"), list("venue", "authors"))
sampled_data <- sample_qtable(cs, 25)
labeled_data <- label_data(sampled_data)
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/sample-data.R')
labeled_data <- label_data(sampled_data)
sampled_data <- sample_qtable(cs, 25)
labeled_data <- label_data(sampled_data)
walmart <- read_csv('../QPackage//inst/extdata//walmartProds_cleaned.csv')
amazon <- read_csv('../QPackage//inst/extdata//amazonProds_cleaned.csv')
head(walmart)
head(ama)
head(amazon)
amazon_dataset <- qtable(amazon)
walmart_dataset <- qtable(walmart)
save(amazon_dataset, file = "../QPackage//data/amazon_dataset.RData")
save(walmart_dataset, file = "../QPackage//data/walmart_dataset.RData")
source('~/.active-rstudio-document')
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
tuple(a=5, b=6)
tuple(list(a=5, b=6)
)
source('~/.active-rstudio-document')
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
tuple(list(a=5, b=6))
library(QPackage)
library(QP)
library(QPackage)
tuple(list(a=5, b=6))
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
tuple(list(a=5, b=6))
ll
length(ll)
tuple(a=5, b=6)
length(ll)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
tuple(a=5, 5)
ll
names(ll)
lapply(names(ll), len)
lapply(names(ll), length)
lapply(names(ll), nchar)
unlist(lapply(names(ll), nchar))
any(unlist(lapply(names(ll), nchar)) == 0)
debugSource('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
t1 <- tuple(a=5, b=10)
t1
t1$a
t1$b
t2 <- tuple(a=5, b)
t2 <- tuple(a=5, 10)
t2 <- tuple(list(a=5, b=10))
source('C:/Pradap/Research/R-Packages/Q-RPackage/QPackage/R/tuple.R')
t2 <- tuple(list(a=5, b=10))
t2
t2$a
t2$b
tuple(a=5, b=6)
t1 <- tuple(a=5, b=10)
t1
library(QPackages)
library(QPackage)
print("Importing walmart data")
walmart <- read_csv("../QPackage/inst//extdata/walmartProds_cleaned.csv", status = read_status)
print(read_status)
# check id
status <- check_id(walmart, list("id"))
print(status)
# set id
status <- set_id(walmart, list("id"))
print(status)
# -- amazon
print("Importing amazon data")
amazon <- read_csv("../QPackage/inst//extdata/amazonProds_cleaned.csv", status = read_status)
print(read_status)
# check id
status <- check_id(amazon, list("id"))
print(status)
# set id
status <- set_id(amazon, list("id"))
print(status)
attr1 <- "brand"
attr2 <- "brand"
cand_set <-  apply_block(walmart, amazon, attr_equiv_block, attr1, attr2, col_names_a = list("title", "price"), col_names_b = list("title", "price"))
View(cand_set)
sampled_data <- sample_qtable(cand_set, 25)
labeled_data <- label_data(sampled_data)
label_data
label_data(sampled_data)
labeled_data
labeled_data <- label_data(sampled_data)
labeled_data[, "label"]
View(walmart)
View(sampled_data)
library(rJava)
.jinit()
.jaddClassPath("/scratch/pradap/r-work/simfunction.jar")
.jclassPath
.jclassPath()
.jaddClassPath("/scratch/pradap/local/share/javalibs/simmetrics_jar_v1_6_2_d07_02_07.jar")
obj <- .jnew("build/similarityFunction")
.jclassPath()
obj <- .jnew("build/SimilarityFunction")
res <- .jrcall(obj, "whitespaceTokeniser", "muruga saranam")
res <- .jrcall(obj, "whitespaceTokenizer", "muruga saranam")
res
res <- .jrcall(obj, "whitespaceTokenizer", "murugasara")
res
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res
is.list(res)
is.array(res)
type(res)
install.packages('pryr')
res[1]
res[2]
list(res)
library(QPackage)
library(QPackage)
library(QPackage)
.jinit()
.jinit()
library(rJava)
.jinit()
.jaddClassPath("/scratch/pradap/r-work/simfunction.jar")
.jaddClassPath("/scratch/pradap/local/share/javalibs/simmetrics_jar_v1_6_2_d07_02_07.jar")
obj <- .jnew("build/similarityFunction")
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
source('~/.active-rstudio-document')
obj <- .jnew("build/SimilarityFunction")
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res
res$[1]
res$get(1)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
res
.jinit()
library(rJava)
.jaddClassPath("/scratch/pradap/r-work/simfunction.jar")
.jaddClassPath("/scratch/pradap/local/share/javalibs/simmetrics_jar_v1_6_2_d07_02_07.jar")
obj <- .jnew("build/SimilarityFunction")
obj
obj <- .jnew("build/SimilarityFunction")
obj <- .jnew("build/SimilarityFunction")
obj <- .jnew("build/SimilarityFunction")
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res
library(QPackage)
res
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
library(rJava)
.jinit()
.jaddClassPath("/scratch/pradap/r-work/simfunction.jar")
.jaddClassPath("/scratch/pradap/local/share/javalibs/simmetrics_jar_v1_6_2_d07_02_07.jar")
obj <- .jnew("build/SimilarityFunction")
res <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res
res[1]
res[2]
res[3]
res[4]
is.atomic(res)
is.vector(res)
kk <- c("1", "2", "3")
kk
as.list(kk)
.jinit()
.jaddClassPath("/scratch/pradap/r-work/simfunction.jar")
.jaddClassPath("/scratch/pradap/local/share/javalibs/simmetrics_jar_v1_6_2_d07_02_07.jar")
obj <- .jnew("build/SimilarityFunction")
res_tokens <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
print(res_tokens)
res_single_string <- .jrcall(obj, "getSimilarity", "mur", "muru")
print(res_single_string)
res <- .jrcall(obj, "getSimilarity", res_tokens, res_tokens)
res
library(QPackage)
res <- .jrcall(obj, "getSimilarity", as.list(res_tokens), res_tokens)
.jinit()
.jaddClassPath("/scratch/pradap/r-work/simfunction.jar")
.jaddClassPath("/scratch/pradap/local/share/javalibs/simmetrics_jar_v1_6_2_d07_02_07.jar")
obj <- .jnew("build/SimilarityFunction")
res <- .jrcall(obj, "getSimilarity", as.list(res_tokens), res_tokens)
res_tokens <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res <- .jrcall(obj, "getSimilarity", as.list(res_tokens), res_tokens)
res_tokens <- .jrcall(obj, "whitespaceTokenizer", "m uru gas ara")
res_tokens
res <- .jrcall(obj, "getSimilarity", as.list(res_tokens), res_tokens)
res <- .jrcall(obj, "getSimilarity", res_tokens, res_tokens)
library(QPackage)
.jpackage()
.jpackage("java")
library(QPackage)
.jpackage("java")
.jclassPath
.jclassPath()
.jpackage("simfunction")
.jclassPath()
obj <- .jnew("build/SimilarityFunction")
.jpackage("build")
obj <- .jnew("build/SimilarityFunction")
obj <- .jnew("SimilarityFunction")
jclassPath
.jclassPath()
.jpackage("similarityfunction")
obj <- .jnew("SimilarityFunction")
obj <- .jnew("build/SimilarityFunction")
.jpackage("simfunction")
obj <- .jnew("build/SimilarityFunction")
library(QPackage)
obj <- .jnew("build/SimilarityFunction")
obj
s <- ""
nchar(s)
s <- c()
s
s <- c("tt", "")
length(s)
is.list(s)
s <- list(c("tt", ""))
length(s)
library(QPackage)
tok_qgram("muruga saranam",2)
tok_qgram("muruga saranam",2)
library(QPackage)
tok_qgram("muruga saranam",2)
tok_qgram("muruga saranam",2)
tokenizer
.jrcall(tokenizer, "whitespaceTokenizer", "muru")
.jrcall(tokenizer, "whitespaceTokenizer", "muru saranam")
.jrcall(tokenizer, "qgramTokenizer", "muru saranam")
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", 2)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", 2)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", "2")
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", 10)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", 3)
.jcall(tokenizer, "D", qgramTokenizer", "muru saranam", 3)
.jcall(tokenizer, "D", qgramTokenizer", "muru saranam", 1=3)
.jcall(tokenizer, "D", qgramTokenizer", "muru saranam", q=3)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", q=)
.jrcall(tokenizer, "qgramTokenizer", s="muru saranam", q=)
.jrcall(tokenizer, "qgramTokenizer", s="muru saranam", q=2)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", q=2)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam", 2)
.jrcall(tokenizer, "qgramTokenizer", "muru saranam")
.jcall(tokenizer, "D", qgramTokenizer", "muru saranam", 2)
?.jcall
.jcall(tokenizer, "D", "qgramTokenizer", "muru saranam", 2)
.jcall(tokenizer, "S[", "qgramTokenizer", "muru saranam", 2)
.jcall(tokenizer, "S[[", "qgramTokenizer", "muru saranam", 2)
.jrcall(tokenizer,  "qgramTokenizer", "muru saranam", 2)
.jcall(tokenizer, "[S", "whitespaceTokenizer", "muruga saranam")
.jcall(tokenizer, "[S", "qgramTokenizer", "muruga saranam", 2)
library(QPackage)
tok_qgram("muruga saranam", 2)
.jrcall(tokenizer, "qgramTokenizer", s, q)
library(QPackage)
tok_whitespace("muruga saranam")
library(QPackage)
tok_whitespace("muruga saranam")
tok_qgram("muruga saranam", 2)
i<- 10
is.array(i)
is.vector(i)
i <- list(10)
is.vector(i)
library(QPackage)
t1 <- tok_whitespace("muruga saranam")
t2 <- tok_whitespace("saranam saranam")
jaccard(t1, t2)
jaccard(t1, t2)
s1
s2
s1 == NULL
jaccard(t1, t2)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
jaccard(t1, t2)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
jaccard(t1, t2)
library(QPackage)
jaccard(t1, t2)
jaccard(t1, t2)
jaccard(t1, t2)
d1 = 10
d1 = d2 = 0
(d1-d2)/max(d1, d2)
abs((d1-d2)/max(d1, d2))
diff_vals(10, 20)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
diff_vals(10, 20)
adist(10, 20)
lev(10, 20)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/similarity-functions.R')
lev(10, 20)
lev(10, 20)
adist(10, "")
adist(10, NA)
adist(10, NULL)
adist(NULL, NULL)
s <- "jac_1"
"jac_1" <- function(a, b) { return(a+b)}
jac_1(5, 10)
as.character(substitute(s)) <- function(a, b) { return(a+b)}
(substitute(s)) <- function(a, b) { return(a+b)}
substitute(s) <- function(a, b) { return(a+b)}
deparse(substitute(s)) <- function(a, b) { return(a+b)}
deparse(substitute(s))
`deparse(substitute(s))`
kk<-deparse(substitute(s))
`kk`
`kk` <- function(a, b) { return a + b}
assign(kk, function(a, b) { return(a + b)})
kk(10, 5)
assign(`kk`, function(a, b) { return(a + b)})
s(10, 5)
assign(kk, function(a, b) { return(a + b)})
kk(5, 10)
s(10, 6)
s <- "jac_1"
assign(deparse(substitute(s)), function(a, b) { return(a+b)})
jac_1(10, 5)
fn <- function(a, b) { return (a-b)}
assign(deparse(substitute(s)), fn)
jac_1(10, 5)
assign(deparse(substitute(s)), function(a, b) { return(a-b)})
jac_1(10, 5)
s <- "jac_1"
assign(deparse(substitute(s)), function(a, b) { return(a-b)})
s(10, 5)
jac_1(10, 5)
assign("jac_1", function(a, b) { return(a-b)})
jac_1(10, 5)
assign("jac_1", function(a, b) { return(a*b)})
jac_1(10, 5)
fn <- function(a, b) {}
fn <- function(a, b) { return(2*a + b)}
assign("jac_1", fn)
jac_1(10, 5)
fn <- function(a, b) { return(2*a + b)}
assign("jac_1", fn)
k = list()
k[[1]] = "10"
k[[2]] = "20"
k
k[[5]] = "40"
k
parse("jac_1")
deparse("jac_1")
substitute("jac_1")
ll <- assign("jac_1", fn)
ll
substitute(ll)
as.symbol("jac_1")
get_fn_list <- function() {
list_fns <- list()
s <- "jac_1"
fn <- function(a, b) { return(a +b)}
assign(deparse(substitute(s)), fn)
list_fns[[1]] <- as.symbol(deparse(substitute(s)))
s <- "jac_2"
fn <- function(a, b) { return(a - b)}
assign(deparse(substitute(s)), fn)
list_fns[[1]] <- as.symbol(deparse(substitute(s)))
}
get_fn_list <- function() {
list_fns <- list()
s <- "jac_1"
fn <- function(a, b) { return(a +b)}
assign(deparse(substitute(s)), fn)
list_fns[[1]] <- as.symbol(deparse(substitute(s)))
s <- "jac_2"
fn <- function(a, b) { return(a - b)}
assign(deparse(substitute(s)), fn)
list_fns[[2]] <- as.symbol(deparse(substitute(s)))
return(list_fns)
}
kk <- get_fn_list()
kk
tt <- kk[[1]]
tt(10, 5)
kk[[1]](10, 5)
as.function(kk[[1]])
as.function(kk)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
kk <- get_fn_list()
kk
kk[[1]](10, 5)
names(kk)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
kk <- get_fn_list()
kk <- list()
kk["jac1"] <- "temp"
kk["jac1"] <- function (a, b) { return(10)}
kk[["jac1"] <- function (a, b) { return(10)}
kk[["jac1"]] <- function (a, b) { return(10)}
kk
kk$jac1(10, 5)
get_fn_list <- function() {
list_fns <- list()
fn <- function(a, b) { return(a +b)}
assign(deparse(substitute(s)), fn)
#list_fns[[1]] <- as.symbol(deparse(substitute(s)))
list_fns[["jac_1"]] <- fn
s <- "jac_2"
fn <- function(a, b) { return(a - b)}
assign(deparse(substitute(s)), fn)
#list_fns[[2]] <- as.symbol(deparse(substitute(s)))
list_fns[["jac_2"]] <- fn
return(list_fns)
}
kk <- get_fn_list()
kk
as.function("fn <- function(a, b) { return (a + b) } ")
parse("fn <- function(a, b) { return (a + b) } ")
deparse("fn <- function(a, b) { return (a + b) } ")
eval("fn <- function(a, b) { return (a + b) } ")
tt <- eval("fn <- function(a, b) { return (a + b) } ")
tt
type(tt)
expression("fn <- function(a, b) { return (a + b) } ")
eval(expression("fn <- function(a, b) { return (a + b) } "))
eval(expression(fn <- function(a, b) { return (a + b) } ))
fn
eval(expression(fn <- function(a, b) { return (a - b) } ))
fn
eval(parse(text = "fn <- function(a, b) { return (a + b) } "))
eval(parse(text = "fn <- function(a, b) { return (a * b) } "))
fn
