t2 <- merged_tuple[, (1:l2) + l1]
print(t1)
print(t2)
ret_list <- lapply(fn_list, apply_fn, t1, t2)
return(ret_list)
}
ret <- fn_1(d1, d2, fn_list)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
library(QPackage)
ret <- fn_1(d1, d2, fn_list)
merged_tuple
?lapply
col_names_a
col_names_b
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
merged_tuple
class(merged_tuple)
col_names_a
sapply(merged_d, typeof)
ml <- as.list(merged_d)
ml
ml[1, ]
names(ml)
ml$title
ml$title[1]
library(QPackage)
ret <- fn_1(d1, d2, fn_list)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
t
t$id
t
is.list(t)
as.list(t)
is.data.frame(t)
type(t)
typeof(t)
tl <- as.list(t)
tl
t
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
t
tl <- as.list(t)
tl
tl$price <- as.factor(tl$price)
tl$price <- as.numeric(tl$price)
tl
typeof(tl$price)
tl
lapply(tl, typeod)
lapply(tl, typeof)
tl
td <- as.data.frame(tl)
td
apply(td, 1, typeof)
td$price
td$price.1
as.numeric(td$price.1)
td$price
td$price.1
as.numeric(td$price.1)
?as.data.frame
tl
td <- as.data.frame(tl, stringsAsFactors=FALSE)
tf
td
td
td$price.
td$price.1
as.numeric(td$price.1)
convert.magic1 <- function(obj,types){
out <- lapply(1:length(obj),FUN = function(i){FUN1 <- switch(types[i],character = as.character,numeric = as.numeric,factor = as.factor); FUN1(obj[,i])})
names(out) <- colnames(obj)
as.data.frame(out)
}
merged_d
merged_d[1, ]
as.character(merged_d[1, ])
t1
tl
merged_d
sapply(merged_d, class)
sapply(merged_d, type)
sapply(merged_d, typeof)
typs <- sapply(merged_d, typeof)
typs
typs[1]
as.vector(typs[1])
as.vector(typs)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
t
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
t
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
t
sapply(t, class)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
library(QPackage)
ret <- fn_1(d1, d2, fn_list)
sapply(merged_tuple, class)
sapply(merged_tuple, d1)
sapply(d1, class)
ff <- cbind(d1, d2)
sapply(ff, class)
col_types
merged_tuple
sapply(merged_tuple, class)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
classes
out
lapply(out, class)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
ret <- fn_1(d1, d2, fn_list)
merged_tuple
sapply(merged_tuple, class)
t1
t2
ret_list
ret_list
adist(NA, NA)
adist(NA, NULL)
adist(NULL, 19)
adist(NULL, "")
is.null(adist(NULL, ""))
adist(NULL, "fs")
inf - inf
Inf - Inf
Inf + Inf
Inf / Inf
Inf + 1
Inf - Inf
?cbin
?cbind
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/feature-generation.R')
ret <- apply_feat_fn_over_2tables(d1, d2, fn_list)
ret
library(QPackage)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/feature-generation.R')
ret <- apply_feat_fn_over_2tables(d1, d2, fn_list)
ret_list
ret_list
ret_list
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/feature-generation.R')
ret <- apply_feat_fn_over_2tables(d1, d2, fn_list)
ret
unlist(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
rr <- do.call(rbind, ret)
rr
sapply(rr, class)
rr <- as.data.frame(do.call(rbind, ret), stringsAsFactors=F)
rr
sapply(rr, class)
rr <- do.call(rbind, ret)
is.data.frame(rr)
as.data.frame(rr)
kk <- as.data.frame(rr)
kk[1, ]
kk[2, ]
kk[1:2, ]
is.data.frame(kk)
kk
sapply(kk, class)
kk$lev_brand
as.numeric(kk$lev_brand)
as.numeric(kk$jac_title_qgram2_title_qgram_2)
adist("abd", "abc")
adist("abd", NA)
adist("abd", NULL)
is.null(adist("abd", NULL))
adist(NA, "abd")
adist(NA, NA)
adist(NA, NULL)
adist(NULL, "abd")
is.null(adist(NULL, "abd"))
type(adist(NULL, "abd"))
typeof(adist(NULL, "abd"))
print(adist(NULL, "abd"))
adist(NULL, "abd") + 10
adist(NULL, "abd")[1] + 10
adist(NULL, "abd")[1]
adist(NULL, NA)[1]
adist(NULL, NULL)[1]
adist("ABD", NULL)[1]
kk
convert_types(kk, rep("numeric", 4)
)
kk1 <- convert_types(kk, rep("numeric", 4))
kk1
sapply(kk1, class)
rr
kk1 <- convert_types(rr, rep("numeric", 4))
kk1
is.data.frame(kk1)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/feature-generation.R')
ret <- apply_feat_fn_over_2tables(d1, d2, fn_list)
ret
library(QPackage)
ret <- apply_feat_fn_over_2tables(d1, d2, fn_list)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/feature-generation.R')
ret <- apply_feat_fn_over_2tables(d1, d2, fn_list)
ret
library(rJava)
library(QPackage)
install.packages('rJava')
install.packages('rJava')
quit()
q()
?strsplit
data(bowker_bk_dataset)
b <- bowker_bk_dataset
strsplit("muruga saranam", " ")
fn <- function(s) { length(strsplit(s, " "))}
kk <- lapply(b[, "title"], fn)
kk
fn <- function(s) { length(unlist(strsplit(s, " ")))}
kk <- lapply(b[, "title"], fn)
kk
kk1 <- lapply(w[, "title"], fn)
data(walmart_bk_dataset)
w <- walmart_bk_dataset
kk1 <- lapply(w[, "title"], fn)
mean(unlist(kk1))
mean(unlist(kk))
a <- list()
b <- list()
b[[1]] <- list("jaro")
b[[2]] <- list("jaro_winkler")
b[[3]] <- list("lev")
b[[4]] <- list("soundex")
b[[5]] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
b[[6]] <- list("exact_match")
a[["SINGLE_WORD"]] <- b
a
a <- list()
b <- list()
b[1] <- list("jaro")
b[2] <- list("jaro_winkler")
a["sws"] <- b
a[["sws"]] <- b
a
a$sws
a$sws[[1]]
lapply(a$sws, funtion(s) { c(list("brand", "brand"), s)})
lapply(a$sws, funtion(s) { c(list("brand", "brand"), s) })
fn1 <-function(s) {c(list("brand", "brand"), s)}
lapply(a$sws, fn1)
lapply(unlist(a$sws), funtion(s) { c(list("brand", "brand"), s) })
lapply(unlist(a$sws), fn1)
ll <- lapply(unlist(a$sws), fn1)
fn3 <- function(s) { do.call(fill_fn_template(s))}
lapply(ll, fn3)
fn3 <- function(s) { do.call(fill_fn_template, s)}
lapply(ll, fn3)
ff <- lapply(ll, fn3)
fn4 <- function(s) { eval(parse(text = s))}
ff2 <- lapply(ff, fn4)
ff2
names(ff2)
rownames(ff2)
names(ff2) <- c("p1", "p2")
ff2
a
fn6 <- function(s, f) { if(! s %in% f) { return s}}
fn6 <- function(s, f) { if(! s %in% f) { return(s)}}
lapply(a$sws, fn6, c("jaro"))
nn <- lapply(a$sws, fn6, c("jaro"))
is.null(nn)
lapply(nn, na.omit)
ll[!lapply(ll,is.null)]
nn[!lapply(nn,is.null)]
lapply(nn, is.null)
!lapply(nn, is.null)
sapply(nn, is.null)
!sapply(nn, is.null)
ll[!sapply(nn, is.null)]
nn[!sapply(nn, is.null)]
__kk
__kk <- 10
kk... <- 10
kk..... <- 10
kk.. <- 10
kk... <- 10
word_len <- function(s) {
length(unlist(strsplit(s, " ")))
}
check_valid <- function(s, simlist, toklist) {
s <- unlist(s)
if(any(s %in% simlist)) {
return(NULL)
}
if(any(s %in% toklist))
return(NULL)
return(s)
}
fill_fn <- function(s, l) {
l <- unlist(l)
s <- unlist(s)
s <- list(s)
l <- list(l)
print(s)
print(l)
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fn_str))
}
a <- list()
b <- list()
b[[1]] <- list("lev")
b[[2]] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
b[[3]] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
a$mws <- b
w <- walmart_bk_dataset
b <- bowker_bk_dataset
attr_corres = NULL
if(is.null(attr_corres)) {
c1 <- colnames(w)
c2 <- colnames(b)
cmn <- setdiff(intersect(c1, c2), c(unlist(w@key), unlist(b@key)))
attr_corres <- lapply(cmn, rep, 2)
}
global_simlist <- c("jaccard, lev")
global_toklist <- c("tok_whitespace", "tok_gram")
allowed_simlist <- c("jaccard", "lev")
allowed_toklist <- c( "tok_qgram")
attrs <- attr_corres[[1]]
if(class(w[, attrs[1]]) == class(w[, attrs[2]])) {
if(class(w[, attrs[1]] == "character")) {
len1 <- lapply(w[, attrs[1]], word_len)
len1 <- unlist(len1)
len2 <- lapply(w[, attrs[2]], word_len)
len2 <- unlist(len1)
if(mean(len1) > 5 && mean(len2) > 5) {
mws <- a$mws
avoid_simlist <- setdiff(global_simlist, allowed_simlist)
avoid_toklist <- setdiff(global_toklist, allowed_toklist)
valid_list <- lapply(mws, check_valid, avoid_simlist, avoid_toklist)
valid_list <- valid_list[!sapply(valid_list, is.null)]
attr_list <- lapply(attrs, list)
}
}
}
attrs <- attr_corres[[1]]
if(class(w[, attrs[1]]) == class(w[, attrs[2]])) {
if(class(w[, attrs[1]]) == "character") {
len1 <- lapply(w[, attrs[1]], word_len)
len1 <- unlist(len1)
len2 <- lapply(w[, attrs[2]], word_len)
len2 <- unlist(len1)
if(mean(len1) > 5 && mean(len2) > 5) {
mws <- a$mws
avoid_simlist <- setdiff(global_simlist, allowed_simlist)
avoid_toklist <- setdiff(global_toklist, allowed_toklist)
valid_list <- lapply(mws, check_valid, avoid_simlist, avoid_toklist)
valid_list <- valid_list[!sapply(valid_list, is.null)]
attr_list <- lapply(attrs, list)
}
}
}
attr_list
valid_list
attrs
lapply(valid_list, fill_fn, attr_list)
lapply(valid_list, fill_fn, attrs)
attrs
list(attrs)
fill_fn <- function(s, l) {
fn_str <- do.call(fill_fn_template, c(list(l), s))
fn_obj <- eval(parse(text = fn_str))
return(fn_obj)
}
lapply(valid_list, fill_fn, attrs)
fill_fn <- function(s, l) {
#   fn_str <- do.call(fill_fn_template, c(list(l), s))
#   fn_obj <- eval(parse(text = fn_str))
#   return(fn_obj)
print(l)
print(s)
}
lapply(valid_list, fill_fn, attrs)
fill_fn <- function(s, l) {
#   fn_str <- do.call(fill_fn_template, c(list(l), s))
#   fn_obj <- eval(parse(text = fn_str))
#   return(fn_obj)
print(l)
print(s)
print('-----')
}
lapply(valid_list, fill_fn, attrs)
valid_list
fill_fn <- function(s, l) {
fn_str <- do.call(fill_fn_template, c(list(l), list(s)))
fn_obj <- eval(parse(text = fn_str))
return(fn_obj)
}
lapply(valid_list, fill_fn, attrs)
lapply(valid_list, fill_fn, attr_list)
fill_fn <- function(s, l) {
fn_str <- do.call(fill_fn_template, c(list(l), s))
fn_obj <- eval(parse(text = fn_str))
return(fn_obj)
}
lapply(valid_list, fill_fn, attr_list)
fill_fn <- function(s, l) {
fn_str <- do.call(fill_fn_template, list(unlist(l), unlist(s)))
fn_obj <- eval(parse(text = fn_str))
return(fn_obj)
}
lapply(valid_list, fill_fn, attr_list)
source('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
library(QPackage)
lapply(valid_list, fill_fn, attr_list)
l
debugSource('/scratch/pradap/r-work/r-packages/Q-RPackage/QPackage/R/test.R')
lapply(valid_list, fill_fn, attr_list)
s1
is.list(s1)
l
unlist(l)
list(s, unlist(l))
list(s1, unlist(l))
c(s1, unlist(l))
list(c(s1, unlist(l)))
list(c( unlist(l), s1))
do.call(fill_fn_template, list(c(unlist(l), s1)))
do.call(fill_fn_template, list((unlist(l), s1)))
kk <- list(s1, unlist(l))
do.call(fill_fn_template, kk)
?fill_fn_template
do.call(fill_fn_template, list("title", "title", "lev"))
kk <- list("title", "title", "lev")
kk
s1
l
unlist(l)
c(s1, unlist(l))
list(c(s1, unlist(l)))
k <- c(unlist(l), s1)
k
list(k)
attr_list
c(attr_list, l)
c(attr_list, s1)
id_fn <- function(inp) {
inp
}
attr_list <- lapply(attrs, id_fn)
attr_list
do.call(fill_fn_template, c(l, s1))
I(s)
I(attr_list)
attr_list
attr_list <- lapply(attrs, id_fn)
id_fn <- function(inp) {
inp
}
attr_list <- lapply(attrs, id_fn)
fn_objs <- lapply(valid_list, fill_fn, attr_list)
fill_fn <- function(s, l) {
fn_str <- do.call(fill_fn_template, c(l, s))
fn_obj <- eval(parse(text = fn_str))
return(fn_obj)
}
attr_list <- lapply(attrs, id_fn)
fn_objs <- lapply(valid_list, fill_fn, attr_list)
fn_objs
a <- list()
b <- list()
b[1] <- list("lev")
b[2] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
b[3] <- list("jaccard", "tok_qgram", 3, "tok_qgram", 3)
a$mws <- b
lkp_table <- list()
l1 <- list()
l1[[1]] <- list("monge_elkan")
l1[[1]] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
l1[[2]] <- list("jaccard", "tok_whitespace", NULL, "tok_whitespace", NULL)
l1[[1]] <- list("monge_elkan")
l1[[3]] <- list("cosine", "tok_whitespace", NULL, "tok_whitespace", NULL)
l1
lkp_table$MWM <- l1
lkp_table
lkp_table$MWM
auto_gen_table... <- lkp_table
dict <- list()
dict["jaccard"] <- "jac"
dict["tok_whitespace"] <- "ws"
dict["monge_elkan"] <- "mon_elk"
feat_lkp_names... <- dict
save(list(auto_gen_table..., feat_lkp_names...), file = sysdata.rda)
save(auto_gen_table..., feat_lkp_names..., file = "sysdata.rda")
save(auto_gen_table..., feat_lkp_names..., file = "R/sysdata.rda")
library(QPackage)
QPackage:::sysdata
QPackage:::auto_gen_table...
QPackage:::auto_gen_table...
QPackage:::auto_gen_table...
QPackage:::feat_lkp_names...
